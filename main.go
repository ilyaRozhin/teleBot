package main

import (
	"encoding/json"
	"fmt"
)

// str - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ url
const urlApi = "https://api.telegram.org/"

// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º %0A - —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
func commandHandler(t *TelegramBot) {
	var param paramSendMessages
	param.chatId = t.Update[0].Message.Chat.ID
	switch t.Update[0].Message.Text {
	case "/start":
		param.text = "–ü—Ä–∏–≤–µ—Ç, @" + t.Update[0].Message.From.UserName + " —Ç—ã –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–∏–π, –Ω–∞–±–∏—Ä–∞–π /help —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∫—É—Ä—Å –¥–µ–ª."
		t.sendMessage(param)
	case "/end":
		param.text = "–ñ–∞–ª—å, @" + t.Update[0].Message.From.UserName + ", –Ω–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ—â–∞—Ç—å—Å—è. –†–∞–¥ –±—É–¥—É –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞!"
		t.sendMessage(param)
	case "/help":
		param.text = "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º\\?*%0A" +
			"%0A/search —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\\." +
			"%0A/newchat –µ—Å–ª–∏ —Ç–µ–±–µ —Å—Ç–∞–ª–æ —Å–∫—É—á–Ω–æ –∏ —Ö–æ—á–µ—Ç—Å—è –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –ª—é–±–∏—Ç–µ–ª—è–º–∏ –∫–æ—Ç—è—Ç\\." +
			"%0A/endchat –Ω–æ–≤—ã–π –¥—Ä—É–≥ —É–∂–µ –Ω–∞—à–µ–ª –≤–∞—Å –≤ —Å–æ—Ü\\. —Å–µ—Ç—è—Ö –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ –æ—Ç–ø–∞–ª–∞ –Ω–µ –±–µ–¥–∞\\." +
			"%0A/aboutme –≤–¥—Ä—É–≥ —Ç–µ–±–µ —Å—Ç–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∫—Ç–æ –∂–µ —Å–¥–µ–ª–∞–ª —Ç–∞–∫–æ–≥–æ –∫—Ä—É—Ç–æ–≥–æ –±–æ—Ç–∞ \\. "
		param.parseMode = "MarkdownV2"
		t.sendMessage(param)
	case "/aboutme":
		param.text = "*–ö—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å\\?*%0A" +
			"%0A–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–ª—å—è –∏ —è –∑–∞–Ω–∏–º–∞—é—Å—å Go\\-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π\\, –ø–æ–∫–∞ —á—Ç–æ —è –Ω–æ–≤–∏—á–µ–∫\\, –Ω–æ —É—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –≤—Å–µ–º —á–µ–≥–æ –Ω–µ –∑–Ω–∞—é\\. " +
			"–ï—Å–ª–∏ –≤–∞–º –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å —Å–æ –º–Ω–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è\\, —Ç–æ –∑–¥–µ—Å—å —è –æ—Å—Ç–∞–≤–ª—è—é —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\\: " +
			"@KuZy\\_i \\- —Ç–µ–ª–µ–≥—Ä–∞–º–º\\."
		param.parseMode = "MarkdownV2"
		t.sendMessage(param)
	case "/search":
		inlineKeyboardHandler(&param, "/search")
		t.sendMessage(param)
	case "/endchat":
		inlineKeyboardHandler(&param, "/endchat")
		t.sendMessage(param)
	case "/startchat":
		inlineKeyboardHandler(&param, "/startchat")
		t.sendMessage(param)
	}
}

func menuButtonConstruct(markup *inlineKeyboardMarkup, rows int, lines int) {
	for i := 0; i < rows; i++ {
		firstRow := make([]inlineKeyboardButton, lines)
		markup.InlineKeyboard = append(markup.InlineKeyboard, firstRow)
	}
}

func inlineKeyboardHandler(param *paramSendMessages, str string) {
	var keyboardMarkup inlineKeyboardMarkup
	switch str {
	case "/search":
		param.text = "*–í–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Ç–∏–∫–∞—Ö\\.\\.\\.*%0A%0A–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ –∫–æ—Ç–∏–∫–∞\\. " +
			"–ù–µ –∑–∞–±—ã–≤–∞–π\\, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç—å\\. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫–∞–º" +
			" –Ω–∞–∂–∞–≤ –∫–ª–∞–≤–∏—à—É *–ù–∞—á–∞—Ç—å*\\."
		param.parseMode = "MarkdownV2"
		menuButtonConstruct(&keyboardMarkup, 3, 1)
		keyboardMarkup.InlineKeyboard[0][0].Text = "–ù–∞—á–∞—Ç—åüòº"
		keyboardMarkup.InlineKeyboard[0][0].CallbackData = "start_search"
		keyboardMarkup.InlineKeyboard[1][0].Text = "–ò–∑–º–µ–Ω–∏—Ç—åüßê"
		keyboardMarkup.InlineKeyboard[1][0].CallbackData = "edit"
		keyboardMarkup.InlineKeyboard[2][0].Text = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—åüëÅ"
		keyboardMarkup.InlineKeyboard[2][0].CallbackData = "look"
		byteMass, err := json.Marshal(keyboardMarkup)
		if err != nil {
			panic(err)
		}
		param.replyMarkup = string(byteMass)
	case "/endchat":
		param.text = "*–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\\, –∫–∞–∫ —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\\?*%0A%0A‚ù§Ô∏è \\- –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –ª—é–±–∏—Ç–µ–ª—å –∫–æ—Ç–æ–≤\\.%0Aü§å \\- –∑–Ω–∞—Ç–æ–∫ –≤ —Å–º–µ—à–Ω—ã—Ö –∫–æ—Ç–∞—Ö\\." +
			"%0Aüëé \\- —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∞–Ω\\."
		param.parseMode = "MarkdownV2"
		menuButtonConstruct(&keyboardMarkup, 1, 3)
		keyboardMarkup.InlineKeyboard[0][0].Text = "‚ù§Ô∏è"
		keyboardMarkup.InlineKeyboard[0][0].CallbackData = "love"
		keyboardMarkup.InlineKeyboard[0][1].Text = "ü§å"
		keyboardMarkup.InlineKeyboard[0][1].CallbackData = "good"
		keyboardMarkup.InlineKeyboard[0][2].Text = "üëé"
		keyboardMarkup.InlineKeyboard[0][2].CallbackData = "bad"
		byteMass, err := json.Marshal(keyboardMarkup)
		if err != nil {
			panic(err)
		}
		param.replyMarkup = string(byteMass)
	case "/startchat":
		param.text = "*–ö–æ–≥–æ –∏—â–µ–º\\?*%0A%0A–ú–∞–¥–∞–º –∞–ª–∏ –ú—É—Å—å—ë?"
		param.parseMode = "MarkdownV2"
		menuButtonConstruct(&keyboardMarkup, 1, 2)
		keyboardMarkup.InlineKeyboard[0][0].Text = "–ú–∞–¥–∞–º"
		keyboardMarkup.InlineKeyboard[0][0].CallbackData = "woman"
		keyboardMarkup.InlineKeyboard[0][1].Text = "–ú—É—Å—å—ë"
		keyboardMarkup.InlineKeyboard[0][1].CallbackData = "man"
		byteMass, err := json.Marshal(keyboardMarkup)
		if err != nil {
			panic(err)
		}
		param.replyMarkup = string(byteMass)
	}
}

func handlerStartEnd(t *TelegramBot) {
	commandHandler(t) //–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
}

func callbackKeyboardExecutor(t *TelegramBot) {
	var requestLine = t.UrlServer + "bot" + t.Token + "/answerCallbackQuery"
	var param paramSendMessages
	var keyboard inlineKeyboardMarkup
	switch t.Update[0].CallbackQuery.Data {
	case "edit":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ..."
		param.text = "*–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\\?*"
		if t.Data != "" {
			param.text += "%0A%0A–í–∞—à–µ –ø—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\\: " + t.Data + "\\."
		} else {
			param.text += "%0A%0A–°—Ç–∞—Ä–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞\\."
		}
		param.parseMode = "MarkdownV2"
		param.chatId = t.Update[0].CallbackQuery.From.ID // (–ö–û–°–¢–´–õ–¨) –û–≥—Ä–æ–º–Ω—ã–π –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ Id —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ????
		fmt.Println(param.chatId)
		param.protectContent = true
		menuButtonConstruct(&keyboard, 1, 2)
		keyboard.InlineKeyboard[0][0].Text = "–î–∞"
		keyboard.InlineKeyboard[0][0].CallbackData = "yes"
		keyboard.InlineKeyboard[0][1].Text = "–ù–µ—Ç"
		keyboard.InlineKeyboard[0][1].CallbackData = "no"
		byteMass, err := json.Marshal(keyboard)
		if err != nil {
			panic(err)
		}
		param.replyMarkup = string(byteMass)
		t.sendMessage(param)
	case "start_search":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–ù–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ ..."
	case "look":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ..."
		if t.Data != "" {
			param.text += "%0A%0A*–í–∞—à–µ –ø—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\\:* " + t.Data + "\\."
		} else {
			param.text += "%0A%0A*–°—Ç–∞—Ä–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞\\.*"
		}
		param.parseMode = "MarkdownV2"
		param.chatId = t.Update[0].CallbackQuery.From.ID
		t.sendMessage(param)
	case "love":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
	case "good":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
	case "bad":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
	case "woman":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–£–∂–µ –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ..."
	case "man":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–£–∂–µ –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ..."
	}
	fmt.Println(string(post(requestLine)))
}

func main() {
	var botToken = "5622217484:AAHqr_GhpMfbfSs38Kc4ybsr85CMTh61wGE"
	var tBot TelegramBot
	var param paramGetUpdates

	tBot.Token = botToken
	tBot.UrlServer = urlApi

	param.limit = 0
	param.timeout = 0
	param.allowedUpdates = []string{}

	for true {
		tBot.getUpdates(param)
		if len(tBot.Update) != 0 {
			param.offset = tBot.Update[len(tBot.Update)-1].UpdateId
			handlerStartEnd(&tBot)
			if tBot.Update[0].CallbackQuery.Data != "" {
				callbackKeyboardExecutor(&tBot)
			}
			param.offset++
		}

	}
}
