package main

import (
	"encoding/json"
	"fmt"
	"strconv"
)

// str - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ url
const urlApi = "https://api.telegram.org/"

// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º %0A - —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
func commandHandler(t *TelegramBot, command string, chatID int64) {
	var param paramSendMessages
	param.chatId = chatID
	switch command {
	case "/start":
		param.text = "–ü—Ä–∏–≤–µ—Ç, @" + t.Update[0].Message.From.UserName + " —Ç—ã –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–∏–π, –Ω–∞–±–∏—Ä–∞–π /help —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∫—É—Ä—Å –¥–µ–ª."
		t.sendMessage(param)
	case "/end":
		param.text = "–ñ–∞–ª—å, @" + t.Update[0].Message.From.UserName + ", –Ω–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ—â–∞—Ç—å—Å—è. –†–∞–¥ –±—É–¥—É –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞!"
		t.sendMessage(param)
	case "/help":
		param.text = "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º\\?*%0A" +
			"%0A*/search* —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\\." +
			"%0A*/startchat* –µ—Å–ª–∏ —Ç–µ–±–µ —Å—Ç–∞–ª–æ —Å–∫—É—á–Ω–æ –∏ —Ö–æ—á–µ—Ç—Å—è –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –ª—é–±–∏—Ç–µ–ª—è–º–∏ –∫–æ—Ç—è—Ç\\." +
			"%0A*/endchat* –Ω–æ–≤—ã–π –¥—Ä—É–≥ —É–∂–µ –Ω–∞—à–µ–ª –≤–∞—Å –≤ —Å–æ—Ü\\. —Å–µ—Ç—è—Ö –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ –æ—Ç–ø–∞–ª–∞\\." +
			"%0A*/aboutme* –≤–¥—Ä—É–≥ —Ç–µ–±–µ —Å—Ç–∞–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∫—Ç–æ –∂–µ —Å–¥–µ–ª–∞–ª —Ç–∞–∫–æ–≥–æ –∫—Ä—É—Ç–æ–≥–æ –±–æ—Ç–∞\\. " +
			"%0A*/menu* –º–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏\\."
		param.parseMode = "MarkdownV2"
		t.sendMessage(param)
	case "/aboutme":
		param.text = "*–ö—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å\\?*%0A" +
			"%0A–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–ª—å—è –∏ —è –∑–∞–Ω–∏–º–∞—é—Å—å Go\\-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π\\, –ø–æ–∫–∞ —á—Ç–æ —è –Ω–æ–≤–∏—á–µ–∫\\, –Ω–æ —É—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –≤—Å–µ–º —á–µ–≥–æ –Ω–µ –∑–Ω–∞—é\\. " +
			"–ï—Å–ª–∏ –≤–∞–º –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å —Å–æ –º–Ω–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è\\, —Ç–æ –∑–¥–µ—Å—å —è –æ—Å—Ç–∞–≤–ª—è—é —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\\: " +
			"@KuZy\\_i \\- —Ç–µ–ª–µ–≥—Ä–∞–º–º\\."
		param.parseMode = "MarkdownV2"
		t.sendMessage(param)
	case "/search":
		inlineKeyboardHandler(&param, "/search")
		t.sendMessage(param)
	case "/endchat":
		inlineKeyboardHandler(&param, "/endchat")
		t.sendMessage(param)
	case "/startchat":
		inlineKeyboardHandler(&param, "/startchat")
		t.sendMessage(param)
	case "/menu":
		mainMenu(&param)
		t.sendMessage(param)
	}
}

func menuButtonConstruct(markup *inlineKeyboardMarkup, rows int, lines int) {
	for i := 0; i < rows; i++ {
		firstRow := make([]inlineKeyboardButton, lines)
		markup.InlineKeyboard = append(markup.InlineKeyboard, firstRow)
	}
}

func mainMenu(param *paramSendMessages) {
	var keyboardMarkup inlineKeyboardMarkup
	param.text = "*–ú–µ–Ω—é*%0A%0A–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–µ\\-–Ω–∏–±—É–¥—å –¥–µ–π—Å—Ç–≤–∏–µ\\! \\(–õ—É—á—à–µ –≤—Å–µ–≥–æ —á—Ç–æ\\-—Ç–æ —Å –∫–æ—Ç–∏–∫–∞–º–∏\\)\\. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Ç–æ –Ω–∞–±–µ—Ä–∏ /help\\."
	param.parseMode = "MarkdownV2"
	menuButtonConstruct(&keyboardMarkup, 2, 2)
	keyboardMarkup.InlineKeyboard[0][0].Text = "–ü–æ–∏—Å–∫"
	keyboardMarkup.InlineKeyboard[0][0].CallbackData = "search"
	keyboardMarkup.InlineKeyboard[1][0].Text = "–ü–æ–º–æ—â—å"
	keyboardMarkup.InlineKeyboard[1][0].CallbackData = "help"
	keyboardMarkup.InlineKeyboard[0][1].Text = "–û–±—â–µ–Ω–∏–µ"
	keyboardMarkup.InlineKeyboard[0][1].CallbackData = "communicate"
	keyboardMarkup.InlineKeyboard[1][1].Text = "–û —Å–æ–∑–¥–∞—Ç–µ–ª–µ"
	keyboardMarkup.InlineKeyboard[1][1].CallbackData = "about_me"
	byteMass, err := json.Marshal(keyboardMarkup)
	if err != nil {
		panic(err)
	}
	param.replyMarkup = string(byteMass)
}

func inlineKeyboardHandler(param *paramSendMessages, str string) {
	var keyboardMarkup inlineKeyboardMarkup
	switch str {
	case "/search":
		param.text = "*–í–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Ç–∏–∫–∞—Ö\\.\\.\\.*%0A%0A–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ –∫–æ—Ç–∏–∫–∞\\. " +
			"–ù–µ –∑–∞–±—ã–≤–∞–π\\, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç—å\\. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫–∞–º" +
			" –Ω–∞–∂–∞–≤ –∫–ª–∞–≤–∏—à—É *–ù–∞—á–∞—Ç—å*\\."
		param.parseMode = "MarkdownV2"
		menuButtonConstruct(&keyboardMarkup, 3, 1)
		keyboardMarkup.InlineKeyboard[0][0].Text = "–ù–∞—á–∞—Ç—åüòº"
		keyboardMarkup.InlineKeyboard[0][0].CallbackData = "start_search"
		keyboardMarkup.InlineKeyboard[1][0].Text = "–ò–∑–º–µ–Ω–∏—Ç—åüßê"
		keyboardMarkup.InlineKeyboard[1][0].CallbackData = "edit"
		keyboardMarkup.InlineKeyboard[2][0].Text = "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—åüëÅ"
		keyboardMarkup.InlineKeyboard[2][0].CallbackData = "look"
		byteMass, err := json.Marshal(keyboardMarkup)
		if err != nil {
			panic(err)
		}
		param.replyMarkup = string(byteMass)
	case "/endchat":
		param.text = "*–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\\, –∫–∞–∫ —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\\?*%0A%0A‚ù§Ô∏è \\- –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –ª—é–±–∏—Ç–µ–ª—å –∫–æ—Ç–æ–≤\\.%0Aü§å \\- –∑–Ω–∞—Ç–æ–∫ –≤ —Å–º–µ—à–Ω—ã—Ö –∫–æ—Ç–∞—Ö\\." +
			"%0Aüëé \\- —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∞–Ω\\."
		param.parseMode = "MarkdownV2"
		menuButtonConstruct(&keyboardMarkup, 1, 3)
		keyboardMarkup.InlineKeyboard[0][0].Text = "‚ù§Ô∏è"
		keyboardMarkup.InlineKeyboard[0][0].CallbackData = "love"
		keyboardMarkup.InlineKeyboard[0][1].Text = "ü§å"
		keyboardMarkup.InlineKeyboard[0][1].CallbackData = "good"
		keyboardMarkup.InlineKeyboard[0][2].Text = "üëé"
		keyboardMarkup.InlineKeyboard[0][2].CallbackData = "bad"
		byteMass, err := json.Marshal(keyboardMarkup)
		if err != nil {
			panic(err)
		}
		param.replyMarkup = string(byteMass)
	case "/startchat":
		param.text = "*–ö–æ–≥–æ –∏—â–µ–º\\?*%0A%0A–¢—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–µ–±–µ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–µ–ª–∏—Ç—å—Å—è –∫–æ—Ç–∞–º–∏, –Ω–µ–ø–ª–æ—Ö–∞—è –∏–¥–µ—è –Ω–µ —Ç–∞–∫ –ª–∏\\?"
		param.parseMode = "MarkdownV2"
		menuButtonConstruct(&keyboardMarkup, 1, 2)
		keyboardMarkup.InlineKeyboard[0][0].Text = "–ú–∞–¥–∞–º"
		keyboardMarkup.InlineKeyboard[0][0].CallbackData = "woman"
		keyboardMarkup.InlineKeyboard[0][1].Text = "–ú—É—Å—å—ë"
		keyboardMarkup.InlineKeyboard[0][1].CallbackData = "man"
		byteMass, err := json.Marshal(keyboardMarkup)
		if err != nil {
			panic(err)
		}
		param.replyMarkup = string(byteMass)
	}
}

func handlerStartEnd(t *TelegramBot) {
	commandHandler(t, t.Update[0].Message.Text, t.Update[0].Message.Chat.ID) //–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
}

func convertForRequest(str string) string {
	var result string
	for _, value := range str {
		if value == ' ' {
			result += "%20"
		} else {
			result += string(value)
		}
	}
	return string(result)
}

func (t *TelegramBot) sendParamMessage(str string) {
	var param paramSendMessages
	param.text = str
	param.parseMode = "MarkdownV2"
	param.chatId = t.Update[0].Message.Chat.ID
	t.sendMessage(param)
}

func (t *TelegramBot) sendPhoto(url string) bool {
	byteMass := post(t.UrlServer + "bot" + t.Token + "/sendPhoto?" + "chat_id=" + strconv.FormatInt(t.Update[0].CallbackQuery.From.ID, 10) +
		"&photo=" + url)
	//fmt.Println(t.UrlServer + "bot" + t.Token + "/sendPhoto?" + "chat_id=" + strconv.FormatInt(t.Update[0].CallbackQuery.From.ID, 10) +
	//	"&photo=" + url)
	fmt.Println(string(byteMass))
	var sConvFirst = &answerSET[bool]{}
	var sConvSecond = &answerSET[message]{}
	err := json.Unmarshal(byteMass, sConvFirst)
	err2 := json.Unmarshal(byteMass, sConvSecond)
	if err != nil && err2 != nil {
		panic(err)
	}
	//fmt.Println(*sConvFirst, *sConvSecond)
	if sConvFirst.Ok || sConvSecond.Ok {
		return true
	}
	return false
}

func callbackKeyboardExecutor(t *TelegramBot) {
	var requestLine = t.UrlServer + "bot" + t.Token + "/answerCallbackQuery"
	var param paramSendMessages
	var keyboard inlineKeyboardMarkup
	var newPhoto []unsplashPhoto
	switch t.Update[0].CallbackQuery.Data {
	case "look":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ..."
		if t.Data != "" {
			param.text += "%0A%0A_*–í–∞—à–µ –ø—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\\: " + t.Data + "\\.*_"
		} else {
			param.text += "%0A%0A_*–°—Ç–∞—Ä–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞\\.*_"
		}
		param.parseMode = "MarkdownV2"
		param.chatId = t.Update[0].CallbackQuery.From.ID
		t.sendMessage(param)
		if t.Data != "" {
			mainMenu(&param)
			t.sendMessage(param)
			break
		}
		fallthrough
	case "edit":
		if requestLine[len(requestLine)-1] != '.' {
			requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ..."
		}
		param.text = "*–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å\\?*"
		if t.Data != "" {
			param.text += "%0A%0A–í–∞—à–µ –ø—Ä–æ—à–ª–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\\: " + t.Data + "\\."
		} else {
			param.text += "%0A%0A–°—Ç–∞—Ä–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\\, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞\\."
		}
		param.parseMode = "MarkdownV2"
		param.chatId = t.Update[0].CallbackQuery.From.ID // (–ö–û–°–¢–´–õ–¨) –û–≥—Ä–æ–º–Ω—ã–π –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ Id —á–∞—Ç–∞ Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ????
		param.protectContent = true
		menuButtonConstruct(&keyboard, 1, 2)
		keyboard.InlineKeyboard[0][0].Text = "–î–∞"
		keyboard.InlineKeyboard[0][0].CallbackData = "yes"
		keyboard.InlineKeyboard[0][1].Text = "–ù–µ—Ç"
		keyboard.InlineKeyboard[0][1].CallbackData = "no"
		byteMass, err := json.Marshal(keyboard)
		if err != nil {
			panic(err)
		}
		param.replyMarkup = string(byteMass)
		t.sendMessage(param)
	case "start_search":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id
		if t.Data == "" {
			t.sendMessage(paramSendMessages{chatId: t.Update[0].CallbackQuery.From.ID, parseMode: "MarkdownV2", text: "_*–í—ã –µ—â–µ –Ω–µ –≤–≤–µ–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ò–∑–º–µ–Ω–∏—Ç—å\\.*_"})
		} else {
			t.Data = convertForRequest(t.Data)
			byteMass := get("https://api.unsplash.com/photos/random?query=" + t.Data + "&count=1&content_filter=high" + "&client_id=6b_vt-YJ4ntrxcK6-CxNx1uUS_glNcBdn-LD1Bd2sXU")
			err := json.Unmarshal(byteMass, &newPhoto)
			if err != nil {
				panic(err)
			}
			//fmt.Println(newPhoto[0].Links.Download)
			if t.sendPhoto(newPhoto[0].Links.Download) {
				param.text = "*–ü–æ–≤—Ç–æ—Ä–∏–º –µ—â–µ —Ä–∞–∑–æ—á–µ–∫\\? –ò–ª–∏ —Ç—ã —É–∂–µ —É—Å—Ç–∞–ª\\?*"
				requestLine += "&text=–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!"
			} else {
				param.text = "*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\(—Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç\\), –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫\\?*"
				requestLine += "&text=–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!"
			}
			param.chatId = t.Update[0].CallbackQuery.From.ID
			param.parseMode = "MarkdownV2"
			menuButtonConstruct(&keyboard, 1, 2)
			keyboard.InlineKeyboard[0][0].Text = "–î–∞"
			keyboard.InlineKeyboard[0][0].CallbackData = "yes_cat"
			keyboard.InlineKeyboard[0][1].Text = "–ù–µ—Ç"
			keyboard.InlineKeyboard[0][1].CallbackData = "no_cat"
			byteMass2, err2 := json.Marshal(keyboard)
			if err2 != nil {
				panic(err2)
			}
			param.replyMarkup = string(byteMass2)
			t.sendMessage(param)
		}
	case "yes_cat":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id
		t.Data = convertForRequest(t.Data)
		byteMass := get("https://api.unsplash.com/photos/random?query=" + t.Data + "&count=1&content_filter=high" + "&client_id=6b_vt-YJ4ntrxcK6-CxNx1uUS_glNcBdn-LD1Bd2sXU")
		err := json.Unmarshal(byteMass, &newPhoto)
		if err != nil {
			panic(err)
		}
		//fmt.Println(newPhoto[0].Links.Download)
		if t.sendPhoto(newPhoto[0].Links.Download) {
			param.text = "*–ü–æ–≤—Ç–æ—Ä–∏–º –µ—â–µ —Ä–∞–∑–æ—á–µ–∫\\? –ò–ª–∏ —Ç—ã —É–∂–µ —É—Å—Ç–∞–ª\\?*"
			requestLine += "&text=–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!"
		} else {
			param.text = "*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\\(—Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç\\), –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫\\?*"
			requestLine += "&text=–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!"
		}
		param.chatId = t.Update[0].CallbackQuery.From.ID
		param.parseMode = "MarkdownV2"
		menuButtonConstruct(&keyboard, 1, 2)
		keyboard.InlineKeyboard[0][0].Text = "–î–∞"
		keyboard.InlineKeyboard[0][0].CallbackData = "yes_cat"
		keyboard.InlineKeyboard[0][1].Text = "–ù–µ—Ç"
		keyboard.InlineKeyboard[0][1].CallbackData = "no_cat"
		byteMass2, err2 := json.Marshal(keyboard)
		if err2 != nil {
			panic(err2)
		}
		param.replyMarkup = string(byteMass2)
		t.sendMessage(param)
	case "no_cat":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
		param.chatId = t.Update[0].CallbackQuery.From.ID
		mainMenu(&param)
		t.sendMessage(param)
	case "love":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
		param.text = "*–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\\!*" + "%0A%0A–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–æ –∫–æ–Ω—Ü–∞\\." +
			" –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞\\: @KuZy\\_i\\. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—ã–∫–Ω–∏—Ç–µ —Å—é–¥–∞ /menu\\."
		param.parseMode = "MarkdownV2"
		param.chatId = t.Update[0].CallbackQuery.From.ID
		t.sendMessage(param)
		//mainMenu(&param)
		//t.sendMessage(param)
	case "good":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
		param.text = "*–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\\!*" + "%0A%0A–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–æ –∫–æ–Ω—Ü–∞\\." +
			" –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞\\: @KuZy\\_i\\. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—ã–∫–Ω–∏—Ç–µ —Å—é–¥–∞ /menu\\."
		param.parseMode = "MarkdownV2"
		param.chatId = t.Update[0].CallbackQuery.From.ID
		t.sendMessage(param)
		//mainMenu(&param)
		//t.sendMessage(param)
	case "bad":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!"
		param.text = "*–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\\!*" + "%0A%0A–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–æ –∫–æ–Ω—Ü–∞\\." +
			" –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞\\: @KuZy\\_i\\. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—ã–∫–Ω–∏—Ç–µ —Å—é–¥–∞ /menu\\."
		param.parseMode = "MarkdownV2"
		param.chatId = t.Update[0].CallbackQuery.From.ID
		t.sendMessage(param)
		//mainMenu(&param)
		//t.sendMessage(param)
	case "woman":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–£–∂–µ –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ..."
		param.text = "*–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\\!*" + "%0A%0A–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–æ –∫–æ–Ω—Ü–∞\\." +
			" –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞\\: @KuZy\\_i\\. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—ã–∫–Ω–∏—Ç–µ —Å—é–¥–∞ /menu\\."
		param.parseMode = "MarkdownV2"
		param.chatId = t.Update[0].CallbackQuery.From.ID
		t.sendMessage(param)
		//mainMenu(&param)
		//t.sendMessage(param)
		//t.LastButtonCommand = "woman"
	case "man":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–£–∂–µ –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ..."
		param.text = "*–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\\!*" + "%0A%0A–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –µ—â–µ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–æ –∫–æ–Ω—Ü–∞\\." +
			" –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞\\: @KuZy\\_i\\. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—ã–∫–Ω–∏—Ç–µ —Å—é–¥–∞ /menu\\."
		param.parseMode = "MarkdownV2"
		param.chatId = t.Update[0].CallbackQuery.From.ID
		t.sendMessage(param)
		//mainMenu(&param)
		//t.sendMessage(param)
	case "yes":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–ñ–¥—ë–º—Å ..."
		param.text = "_*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\\:*_"
		param.parseMode = "MarkdownV2"
		param.chatId = t.Update[0].CallbackQuery.From.ID
		t.Data = "nil"
		t.sendMessage(param)
	case "no":
		requestLine += "?callback_query_id=" + t.Update[0].CallbackQuery.Id + "&text=–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."
		param.chatId = t.Update[0].CallbackQuery.From.ID
		mainMenu(&param)
		t.sendMessage(param)
	case "search":
		commandHandler(t, "/search", t.Update[0].CallbackQuery.From.ID)
	case "help":
		commandHandler(t, "/help", t.Update[0].CallbackQuery.From.ID)
	case "communicate":
		commandHandler(t, "/startchat", t.Update[0].CallbackQuery.From.ID)
	case "aboutme":
		commandHandler(t, "/aboutme", t.Update[0].CallbackQuery.From.ID)
	}
	post(requestLine)
}

func main() {
	var botToken = "5622217484:AAG5JMG14W2b7k-_l4lY-GGzIg6gJbouJ5k"
	var tBot TelegramBot
	var paramMessage paramSendMessages
	tBot.Token = botToken
	var param paramGetUpdates

	tBot.UrlServer = urlApi

	var lastCommand string

	param.limit = 0
	param.timeout = 0
	param.allowedUpdates = []string{}

	for true {
		tBot.getUpdates(param)
		if len(tBot.Update) != 0 {
			param.offset = tBot.Update[len(tBot.Update)-1].UpdateId
			if tBot.Data == "nil" {
				tBot.Data = tBot.Update[0].Message.Text
				tBot.sendParamMessage("_*–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\\!\\!\\!*_")
				paramMessage.chatId = tBot.Update[0].Message.Chat.ID
				mainMenu(&paramMessage)
				tBot.sendMessage(paramMessage)
			}
			handlerStartEnd(&tBot)
			lastCommand = tBot.Update[0].Message.Text
			if tBot.Update[0].CallbackQuery.Data != "" {
				callbackKeyboardExecutor(&tBot)
			}
			fmt.Println(lastCommand)
			//fmt.Println(tBot.Data)
			param.offset++
		}
	}
}
